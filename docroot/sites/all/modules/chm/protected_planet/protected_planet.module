<?php

/**
 * Implements hook_migrate_api().
 */
function protected_planet_migrate_api() {
  return [
    'api' => 2,
    'groups' => [
      'protected_planet' => [ 'title' => t('Protected Planet data'), ],
    ],
    'migrations' => [
      'pa' => [
        'class_name' => 'ProtectedPlanetAreas',
        'group_name' => 'protectedplanet',
      ]
    ],
  ];
}


/**
 * Implements hook_entity_info().
 */
function protected_planet_entity_info() {
  $info = array();
  $info['protected_planet_area'] = array(
    'label' => t('Protected Planet area'),
    'plural label' => t('Protected Planet areas'),
    'controller class' => 'EntityAPIController',
    'base table' => 'protected_planet_area',
    'entity keys' => array('id' => 'wdpaid'),
    'bundle keys' => array(
      'bundle' => 'bundle',
    ),
    'static cache' => TRUE,
    'bundles' => array(),
    'view modes' => array(
      'full' => array(
        'label' => t('Full'),
        'custom settings' => FALSE,
      ),
    ),
    'label callback' => 'entity_class_label',
    'uri callback' => 'entity_class_uri',
    'entity class' => 'ProtectedPlanetAreaEntity',
    'access callback' => 'protected_planet_area_access_callback',
    'views controller class' => 'EntityDefaultViewsController',
    'admin ui' => array(
      'path' => 'admin/structure/protected-planet/area',
      'controller class' => 'EntityDefaultUIController',
    ),
    'module' => 'protected_planet'
  );
  return $info;
}


function protected_planet_area_access_callback($op, $entity = NULL, $account = NULL) {
  // TODO
  if ($op == 'view' || $op == 'update' || $op == 'create' || $op == 'delete') {
    return TRUE;
  }
  else {
    return FALSE;
  }
}

/**
 * Fetch a protected_planet object.
 *
 * This function ends up being a shim between the menu system and
 * protected_planet_load_multiple().
 *
 * This function gets its name from the menu system's wildcard
 * naming conventions. For example, /path/%wildcard would end
 * up calling wildcard_load(%wildcard value).
 *
 * @param int $eid
 *   Integer specifying the entity id.
 * @param bool $reset
 *   A boolean indicating that the internal cache should be reset.
 *
 * @return object
 *   A fully-loaded $basic object or FALSE if it cannot be loaded.
 *
 * @see protected_planet_load_multiple()
 */
function protected_planet_load($eid = NULL, $reset = FALSE) {
  $eids = (isset($eid) ? array($eid) : array());
  $entities = protected_planet_load_multiple($eids, array(), $reset);
  return $entities ? reset($entities) : FALSE;
}

/**
 * Loads multiple basic entities.
 *
 * We only need to pass this request along to entity_load(), which
 * will in turn call the load() method of our entity controller class.
 */
function protected_planet_load_multiple($eids = FALSE, $conditions = array(), $reset = FALSE) {
  return entity_load('protected_planet', $eids, $conditions, $reset);
}



/**
 * Form function to create an entity_example_basic entity.
 *
 * The pattern is:
 * - Set up the form for the data that is specific to your
 *   entity: the columns of your base table.
 * - Call on the Field API to pull in the form elements
 *   for fields attached to the entity.
 */
function protected_planet_area_form($form, &$form_state, $entity) {
  $form_state['model'] = $entity;
  field_attach_form('model', $entity, $form, $form_state);

  $form['wdpaid'] = array(
    '#title' => t('WDPAID identifier'),
    '#type' => 'textfield',
    '#maxlength' => 10,
    '#required' => TRUE,
    '#default_value' => 'TEST',
  );
  $form['name_original'] = array(
    '#title' => t('Original name'),
    '#type' => 'textfield',
    '#size' => 60,
    '#maxlength' => 10,
    '#required' => TRUE,
    '#default_value' => 'TEST',
  );
  $form['name'] = array(
    '#title' => t('Protected area name in English'),
    '#type' => 'textfield',
    '#size' => 60,
    '#maxlength' => 10,
    '#required' => TRUE,
    '#default_value' => 'TEST',
  );
  $form['management_authority'] = array(
    '#title' => t('Management authority'),
    '#type' => 'textfield',
    '#size' => 60,
    '#maxlength' => 20,
    '#required' => TRUE,
    '#default_value' => 'TEST',
  );
  $form['management_plan'] = array(
    '#title' => t('Management plan'),
    '#type' => 'textfield',
    '#size' => 60,
    '#maxlength' => 20,
    '#required' => TRUE,
    '#default_value' => 'TEST',
  );
  $form['country'] = array(
    '#title' => t('Country'),
    '#type' => 'textfield',
    '#size' => 10,
    '#maxlength' => 5,
    '#required' => TRUE,
    '#default_value' => '12',
  );
  $form['actions'] = array('#type' => 'actions');
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save entity'),
    '#weight' => 40,
  );
  $form['actions']['delete'] = array(
    '#type' => 'submit',
    '#value' => t('Delete'),
    '#submit' => array('protected_planet_area_edit_delete'),
    '#weight' => 200,
  );
  return $form;
}

function protected_planet_area_form_submit($form, $form_state) {
  $entity = entity_ui_form_submit_build_entity($form, $form_state);
  $entity->save();
  dpm($entity);
  $form_state['redirect'] = 'admin/structure/protected-planet/area';
}
