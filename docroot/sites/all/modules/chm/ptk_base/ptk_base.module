<?php

require_once dirname(__FILE__) . '/ptk_base.inc';
require_once dirname(__FILE__) . '/ptk_base.domain.inc';
require_once dirname(__FILE__) . '/blocks/AbstractBlock.php';
require_once dirname(__FILE__) . '/blocks/ChmContentStatisticsBlock.php';
require_once dirname(__FILE__) . '/blocks/ChmFooterQuickLinksRootBlock.php';
require_once dirname(__FILE__) . '/blocks/ChmFooterQuickLinksBlock.php';
require_once dirname(__FILE__) . '/blocks/ChmFooterFollowUsBlock.php';
require_once dirname(__FILE__) . '/blocks/ChmFooterCountryLinksBlock.php';
require_once dirname(__FILE__) . '/forms/base.inc';

define('USER_WALLE', 43);
define('ROLE_ADMINISTRATOR', 'administrator');
define('PROTECTED_PLANET_AREA_CSV_UPLOAD_DIR', 'public://protected-areas/');
define('PROTECTED_PLANET_AREA_CSV_VAR', 'ptk_protected_planet_areas_csv_path');

/**
 * Implements hook_permission().
 */
function ptk_base_permission() {
  return [
    'configure chm settings' => [
      'title' => t('Configure global settings'),
      'description' => t('Access global configuration common to all CHM network sites')
    ],
    'configure chm website settings' => [
      'title' => t('Configure website settings'),
      'description' => t('Access CHM website configuration')
    ]
  ];
}

/**
 * Implementation of hook_views_api().
 */
function ptk_base_views_api() {
  return array(
    'api' => 3.0
  );
}

/**
 * Implements hook_menu().
 */
function ptk_base_menu() {
  $items = [
    'admin/reports/chm' => [
      'title' => 'CHM system reports',
      'description' => 'System configuration reports',
      'page callback' => 'ptk_base_admin_page_system_report',
      'file' => 'ptk_base.admin.inc',
      'access arguments' => array('access site reports'),
      'menu_name' => 'management',
      'type' => MENU_NORMAL_ITEM,
    ],
    'admin/reports/chm/types' => [
      'title' => 'Content types structure',
      'description' => 'Overview and export structure of the entities',
      'page callback' => 'ptk_base_admin_page_content_types_overview',
      'file' => 'ptk_base.admin.inc',
      'access arguments' => ['access site reports'],
      'menu_name' => 'management',
      'type' => MENU_NORMAL_ITEM,
    ],
    'admin/reports/chm/types/export' => [
      'title' => 'Export content type information in MS Excel',
      'page callback' => 'ptk_base_admin_page_export_content_types_overview',
      'file' => 'ptk_base.admin.inc',
      'access arguments' => ['access site reports'],
      'type' => MENU_CALLBACK,
    ],
    'admin/reports/chm/taxonomy' => [
      'title' => 'Taxonomies structure',
      'description' => 'Overview and export structure of taxoomies',
      'page callback' => 'ptk_base_admin_page_taxonomies_overview',
      'file' => 'ptk_base.admin.inc',
      'access arguments' => ['access site reports'],
      'menu_name' => 'management',
      'type' => MENU_NORMAL_ITEM,
    ],
    'admin/reports/chm/taxonomy/export' => [
      'title' => 'Export taxonomies information in MS Excel',
      'page callback' => 'ptk_base_admin_page_export_taxonomies_overview',
      'file' => 'ptk_base.admin.inc',
      'access arguments' => ['access site reports'],
      'type' => MENU_CALLBACK,
    ],
    'admin/config/system/chm_global_settings' => [
      'title' => 'CHM Global settings',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('ptk_base_chm_global_settings_form'),
      'file' => 'ptk_base.admin.inc',
      'access arguments' => ['configure chm settings'],
      'type' => MENU_NORMAL_ITEM,
      'description' => 'General configuration for all websites.',
    ],
    'admin/config/system/chm_global_settings/global' => [
      'title' => 'CHM Global settings',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('ptk_base_chm_global_settings_form'),
      'file' => 'ptk_base.admin.inc',
      'access arguments' => ['configure chm settings'],
      'type' => MENU_DEFAULT_LOCAL_TASK,
      'description' => 'General configuration for all websites.',
    ],
    'admin/config/system/chm_global_settings/protected-planet' => [
      'title' => 'Protected planet',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('ptk_base_chm_protected_planet_settings_form'),
      'file' => 'ptk_base.admin.inc',
      'access arguments' => ['configure chm settings'],
      'type' => MENU_LOCAL_TASK,
      'description' => 'Protected Planet integration',
    ],
    'admin/config/system/chm_website_settings' => [
      'title' => 'CHM website settings',
      'page callback' => 'ptk_base_admin_variables',
      'file path' => 'sites/all/modules/contrib/domain_variable',
      'file' => 'domain_variable.admin.inc',
      'access arguments' => ['configure chm website settings'],
      'type' => MENU_NORMAL_ITEM,
      'description' => 'Configure parameters specific to this website.',
    ],
  ];
  return $items;
}

function ptk_base_imce_upload_path() {
  $domain = domain_get_domain();
  return 'websites/' . $domain['machine_name'] . '/uploads';
}


/**
 * Implements hook_block_info().
 */
function ptk_base_block_info() {
  $blocks = [];
  $declaredClasses = get_declared_classes();
  foreach ($declaredClasses as $class) {
    if (strpos($class, 'Drupal\\ptk_base\\blocks\\') === 0) {
      $testClass = new \ReflectionClass($class);
      if ($testClass->isAbstract() === FALSE) {
        /** @var Drupal\ptk_base\blocks\AbstractBlock $block */
        $block = new $class();
        if (method_exists($block, 'info')) {
          $blocks += $block->info();
        }
      }
    }
  }
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function ptk_base_block_view($delta = '') {
  $return = [];
  $klass = \Drupal\ptk_base\blocks\AbstractBlock::getBlockClassName($delta);
  if (class_exists($klass)) {
    /** @var Drupal\ptk_base\blocks\AbstractBlock $block */
    $block = new $klass();
    if (method_exists($block, 'view')) {
      $return = $block->view();
    }
  }
  else {
    drupal_set_message(t('Class !class does not exist.', ['!class' => $klass]), 'error');
  }
  return $return;
}

/**
 * Implements hook_block_view_alter().
 */
function ptk_base_block_view_alter(&$data, $block) {
  $klass = \Drupal\ptk_base\blocks\AbstractBlock::getBlockClassName($block->delta);
  if (class_exists($klass)) {
    /** @var \Drupal\ptk_base\blocks\AbstractBlock $block */
    $block = new $klass();
    if (method_exists($block, 'alter')) {
      $block->alter($data, $block);
    }
  }
}

/**
 * Implements hook_block_configure().
 */
function ptk_base_block_configure($delta = '') {
  $return = [];
  $klass = \Drupal\ptk_base\blocks\AbstractBlock::getBlockClassName($delta);
  if (class_exists($klass)) {
    /** @var Drupal\ptk_base\blocks\AbstractBlock $block */
    $block = new $klass();
    $return = $block->configure();
  }
  else {
    drupal_set_message(t('Class !class does not exist.', ['!class' => $klass]), 'error');
  }
  return $return;
}

/**
 * Implements hook_block_save().
 */
function ptk_base_block_save($delta = '', $edit = array()) {
  $klass = \Drupal\ptk_base\blocks\AbstractBlock::getBlockClassName($delta);
  if (class_exists($klass)) {
    /** @var Drupal\ptk_base\blocks\AbstractBlock $block */
    $block = new $klass();
    $block->save($edit);
  }
  else {
    drupal_set_message(t('Class !class does not exist.', ['!class' => $klass]), 'error');
  }
}

/**
 * Implements hook_schema_alter()
 */
function ptk_base_schema_alter(&$schema) {
  $column = 'title_field_value';
  $new_spec = array(
    'type' => 'varchar', 'length' => 2048, 'not null' => TRUE, 'default' => '',
  );
  $table = 'field_data_title_field';
  if (isset($schema[$table])) {
    $schema[$table]['fields'][$column] = $new_spec;
  }
  $table = 'field_revision_title_field';
  if (isset($schema[$table])) {
    $schema[$table]['fields'][$column] = $new_spec;
  }

  $column = 'name_field_value';
  $table = 'field_data_name_field';
  if (isset($schema[$table])) {
    $schema[$table]['fields'][$column] = $new_spec;
  }
  $table = 'field_revision_name_field';
  if (isset($schema[$table])) {
    $schema[$table]['fields'][$column] = $new_spec;
  }

  $table = 'node';
  $column = 'title';
  if (isset($schema[$table])) {
    $schema[$table]['fields'][$column] = $new_spec;
  }
  $table = 'node_revision';
  if (isset($schema[$table])) {
    $schema[$table]['fields'][$column] = $new_spec;
  }

  $table = 'taxonomy_term_data';
  if (isset($schema[$table])) {
    $schema[$table]['fields']['name']['length'] = 2048;
  }
}

/**
 * Implements hook_field_formatter_info().
 */
function ptk_base_field_formatter_info() {
  return array(
    'event_date_formatter' => array(
      'label' => t('Flexible event date'),
      'field types' => array('date', 'datestamp', 'datetime'),
      'settings' => array(
        /* No settings for now */
      ),
    )
  );
}

function ptk_base_language_switch_links_alter(array &$links, $type, $path) {
  $node = menu_get_object();
  if ($node) {
    // Unset lang-switcher links for non-existent translations
    foreach ($links as $langcode => &$link) {
      if (!isset($node->translations->data[$langcode])) {
        unset($links[$langcode]);
      }
      $link['attributes']['hreflang'] = $langcode;
    }
  }
}

/**
 * Implements hook_field_formatter_view().
 *
 * @inheritdoc
 */
function ptk_base_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array(); // Initialize the var
  $settings = $display['settings']; // get the settings
  foreach ($items as $delta => $item) {
    $f = !empty($item['value']) ? strtotime($item['value']) : NULL;
    $t = !empty($item['value2']) ? strtotime($item['value2']) : NULL;
    $value = PTK::dateIntervalString($f, $t);
    $element[$delta] = array('#type' => 'item', '#markup' => $value);
  }
  return $element;
}

/**
 * Implements hook_iucn_redlist_log().
 */
function ptk_base_iucn_redlist_log($message, $variables, $severity) {
  watchdog('iucn_redlist', $message, $variables, $severity);
}


/**
 * Implements hook_entity_info_alter().
 */
function ptk_base_entity_info_alter(&$entity_info) {
  $entity_info['entityqueue_subqueue']['access callback'] = array('PTK', 'entityQueueAccess');
}

/**
 * Implements hook_custom_theme().
 *
 * Render the book items with administrative theme (webmaster's manual)
 */
function ptk_base_custom_theme() {
  if ($object = menu_get_object()) {
    if ($object->type == 'book') {
      drupal_add_css(drupal_get_path('module', 'ptk_base') . '/css/book.css', array('weight' => -100));
      return 'seven';
    }
  }
}

/**
 * Implements hook_theme().
 */
function ptk_base_theme($existing, $type, $theme, $path) {
  return array(
    'ptk_base_chm_content_statistics_block_config_form' => array(
      'render element' => 'element',
    )
  );
}

function theme_ptk_base_chm_content_statistics_block_config_form($variables) {
  $element = $variables['element'];
  $form = $element['chm_content_statistics'];
  drupal_add_tabledrag('config_table', 'order', 'sibling', 'item-row-weight');
  $header = array(
    'name' => t('Content type'),
    'hide' => t('Hide'),
    'singular' => t('Label (singular)'),
    'plural' => t('Label (plural)'),
    'url' => t('URL (route)'),
    'icon' => t('Icon markup'),
    'weight' => t('Weight'),
  );
  $rows = array();
  foreach (element_children($form) as $key) {
    $row = array('data' => array());
    foreach ($header as $fieldname => $title) {
      $row['data'][] = drupal_render($form[$key][$fieldname]);
      $row['class'] = array('draggable');
    }
    $rows[] = $row;
  }
  $prefix = '<p>' . t('Configure the display of content types statistics. Use the mouse to drag and drop rows to determine the display order in the front-end.') . '</p>';
  return $prefix
    . drupal_render($element['title'])
    . theme('table', array(
      'header' => $header,
      'rows' => $rows,
      'attributes' => array('id' => 'config_table'),
    ));
}


/**
 * Variables settings form
 */
function ptk_base_admin_variables() {
  $domain = domain_get_domain();
  $realm_key = _domain_variable_realm_key($domain);
  module_load_include('form.inc', 'variable_realm');
  return drupal_get_form('variable_realm_edit_variables_form', 'domain', $realm_key);
}


/**
 * Implements hook_user_is_administrator().
 */
function ptk_base_user_is_administrator_alter(&$is_administrator) {
  global $user;
  $is_administrator = in_array(ROLE_ADMINISTRATOR, $user->roles);
}