<?php

require_once dirname(__FILE__) . '/ptk_base.inc';
require_once dirname(__FILE__) . '/ptk_base.cache.inc';
require_once dirname(__FILE__) . '/ptk_base.domain.inc';
require_once dirname(__FILE__) . '/blocks/AbstractBlock.php';
require_once dirname(__FILE__) . '/blocks/ChmInformationPageBlock.php';
require_once dirname(__FILE__) . '/blocks/ChmContentStatisticsBlock.php';
require_once dirname(__FILE__) . '/blocks/ChmFooterQuickLinksRootBlock.php';
require_once dirname(__FILE__) . '/blocks/ChmFooterQuickLinksBlock.php';
require_once dirname(__FILE__) . '/blocks/ChmFooterFollowUsBlock.php';
require_once dirname(__FILE__) . '/blocks/ChmFooterCountryLinksBlock.php';
require_once dirname(__FILE__) . '/forms/base.inc';

define('USER_WALLE', 43);
define('ROLE_ADMINISTRATOR', 'administrator');
define('PROTECTED_PLANET_AREA_CSV_UPLOAD_DIR', 'public://protected-areas/');
define('PROTECTED_PLANET_AREA_CSV_VAR', 'ptk_protected_planet_areas_csv_path');

function ptk_base_taxonomy_get_parents_tids($tid) {
  $parents = &drupal_static(__FUNCTION__, array());
  if ($tid && !isset($parents[$tid])) {
    $query = db_select('taxonomy_term_data', 't');
    $query->join('taxonomy_term_hierarchy', 'h', 'h.parent = t.tid');
    $query->addField('t', 'tid');
    $query->condition('h.tid', $tid);
    $query->addTag('taxonomy_term_access');
    $query->orderBy('t.weight');
    $query->orderBy('t.name');
    $tids = $query->execute()->fetchCol();
    $parents[$tid] = $tids;
  }
  return isset($parents[$tid]) ? $parents[$tid] : array();
}

function ptk_base_taxonomy_get_parents_all_tids($tid) {
  $parents = array($tid);
  $n = 0;
  while ($parent = ptk_base_taxonomy_get_parents_tids($parents[$n])) {
    $parents = array_merge($parents, $parent);
    $n++;
  }
  return $parents;
}

function ptk_base_add_aichi_targets_parents($node) {
  $map = [];
  foreach($node->field_aichi_targets['und'] as $targets) {
    $parents = ptk_base_taxonomy_get_parents_all_tids($targets['tid']);
    if (count($parents) < 2) {
      continue;
    }
    $parent_tid = $parents[1];
    if (count($parents) == 2) {
      $parent_tid = 0;
    }
    $map[$targets['tid']] = $parent_tid;
  }
  foreach($map as $tid => $parent_tid) {
    if (!$parent_tid) {
      continue;
    }
    if (isset($map[$parent_tid])) {
      continue;
    }
    $map[$parent_tid] = 0;
    $node->field_aichi_targets['und'][] = ['tid' => $parent_tid];
  }
}

/**
 * Implements hook_node_presave().
 */
function ptk_base_node_presave($node) {
  if (property_exists($node, 'field_aichi_targets') && $node->field_aichi_targets) {
    ptk_base_add_aichi_targets_parents($node);
  }
}

/**
 * Implements hook_permission().
 */
function ptk_base_permission() {
  return [
    'configure chm settings' => [
      'title' => t('Configure global settings'),
      'description' => t('Access global configuration common to all CHM network sites')
    ],
    'configure chm website settings' => [
      'title' => t('Configure website settings'),
      'description' => t('Access CHM website configuration')
    ]
  ];
}

/**
 * Implementation of hook_views_api().
 */
function ptk_base_views_api() {
  return array(
    'api' => 3.0
  );
}

/**
 * Implements hook_ctools_plugin_type().
 */
function ptk_base_ctools_plugin_type() {
  $plugins['access'] = array(
    'load themes' => TRUE,
  );
  return $plugins;
}

/**
 * Implements hook_menu().
 */
function ptk_base_menu() {
  $items = [
    'admin/reports/chm' => [
      'title' => 'CHM system reports',
      'description' => 'System configuration reports',
      'page callback' => 'ptk_base_admin_page_system_report',
      'file' => 'ptk_base.admin.inc',
      'access arguments' => array('access site reports'),
      'menu_name' => 'management',
      'type' => MENU_NORMAL_ITEM,
    ],
    'admin/reports/chm/types' => [
      'title' => 'Content types structure',
      'description' => 'Overview and export structure of the entities',
      'page callback' => 'ptk_base_admin_page_content_types_overview',
      'file' => 'ptk_base.admin.inc',
      'access arguments' => ['access site reports'],
      'menu_name' => 'management',
      'type' => MENU_NORMAL_ITEM,
    ],
    'admin/reports/chm/types/export' => [
      'title' => 'Export content type information in MS Excel',
      'page callback' => 'ptk_base_admin_page_export_content_types_overview',
      'file' => 'ptk_base.admin.inc',
      'access arguments' => ['access site reports'],
      'type' => MENU_CALLBACK,
    ],
    'admin/reports/chm/taxonomy' => [
      'title' => 'Taxonomies structure',
      'description' => 'Overview and export structure of taxoomies',
      'page callback' => 'ptk_base_admin_page_taxonomies_overview',
      'file' => 'ptk_base.admin.inc',
      'access arguments' => ['access site reports'],
      'menu_name' => 'management',
      'type' => MENU_NORMAL_ITEM,
    ],
    'admin/reports/chm/taxonomy/export' => [
      'title' => 'Export taxonomies information in MS Excel',
      'page callback' => 'ptk_base_admin_page_export_taxonomies_overview',
      'file' => 'ptk_base.admin.inc',
      'access arguments' => ['access site reports'],
      'type' => MENU_CALLBACK,
    ],
    'admin/config/system/chm_global_settings' => [
      'title' => 'CHM Global settings',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('ptk_base_chm_global_settings_form'),
      'file' => 'ptk_base.admin.inc',
      'access arguments' => ['configure chm settings'],
      'type' => MENU_NORMAL_ITEM,
      'description' => 'General configuration for all websites.',
    ],
    'admin/config/system/chm_global_settings/global' => [
      'title' => 'CHM Global settings',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('ptk_base_chm_global_settings_form'),
      'file' => 'ptk_base.admin.inc',
      'access arguments' => ['configure chm settings'],
      'type' => MENU_DEFAULT_LOCAL_TASK,
      'description' => 'General configuration for all websites.',
    ],
    'admin/config/system/chm_global_settings/protected-planet' => [
      'title' => 'Protected planet',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('ptk_base_chm_protected_planet_settings_form'),
      'file' => 'ptk_base.admin.inc',
      'access arguments' => ['configure chm settings'],
      'type' => MENU_LOCAL_TASK,
      'description' => 'Protected Planet integration',
    ],

    'admin/config/system/chm_website_settings' => [
      'title' => 'Site details',
      'page callback' => 'drupal_get_form',
      'page arguments' => ['ptk_base_site_information_settings'],
      'access arguments' => ['configure chm website settings'],
      'description' => 'Change site name, slogan.',
      'weight' => -19,
    ],

/*
    'admin/config/system/chm_website_settings' => [
      'title' => 'CHM website settings',
      'page callback' => 'ptk_base_admin_variables',
      'file path' => 'sites/all/modules/contrib/domain_variable',
      'file' => 'domain_variable.admin.inc',
      'access arguments' => ['configure chm website settings'],
      'type' => MENU_NORMAL_ITEM,
      'description' => 'Configure parameters specific to this website.',
    ],
*/
  ];
  return $items;
}

function ptk_base_imce_upload_path() {
  $domain = domain_get_domain();
  return 'websites/' . $domain['machine_name'] . '/uploads';
}


/**
 * Implements hook_block_info().
 */
function ptk_base_block_info() {
  $blocks = [];
  $declaredClasses = get_declared_classes();
  foreach ($declaredClasses as $class) {
    if (strpos($class, 'Drupal\\ptk_base\\blocks\\') === 0) {
      $testClass = new \ReflectionClass($class);
      if ($testClass->isAbstract() === FALSE) {
        /** @var Drupal\ptk_base\blocks\AbstractBlock $block */
        $block = new $class();
        if (method_exists($block, 'info')) {
          $blocks += $block->info();
        }
      }
    }
  }
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function ptk_base_block_view($delta = '') {
  $return = [];
  $klass = \Drupal\ptk_base\blocks\AbstractBlock::getBlockClassName($delta);
  if (class_exists($klass)) {
    /** @var Drupal\ptk_base\blocks\AbstractBlock $block */
    $block = new $klass();
    if (method_exists($block, 'view')) {
      $return = $block->view();
    }
  }
  else {
    drupal_set_message(t('Class !class does not exist.', ['!class' => $klass]), 'error');
  }
  return $return;
}

/**
 * Implements hook_block_view_alter().
 */
function ptk_base_block_view_alter(&$data, $block) {
  $klass = \Drupal\ptk_base\blocks\AbstractBlock::getBlockClassName($block->delta);
  if (class_exists($klass)) {
    /** @var \Drupal\ptk_base\blocks\AbstractBlock $block */
    $block = new $klass();
    if (method_exists($block, 'alter')) {
      $block->alter($data, $block);
    }
  }
}

/**
 * Implements hook_block_configure().
 */
function ptk_base_block_configure($delta = '') {
  $return = [];
  $klass = \Drupal\ptk_base\blocks\AbstractBlock::getBlockClassName($delta);
  if (class_exists($klass)) {
    /** @var Drupal\ptk_base\blocks\AbstractBlock $block */
    $block = new $klass();
    $return = $block->configure();
  }
  else {
    drupal_set_message(t('Class !class does not exist.', ['!class' => $klass]), 'error');
  }
  return $return;
}

/**
 * Implements hook_block_save().
 */
function ptk_base_block_save($delta = '', $edit = array()) {
  $klass = \Drupal\ptk_base\blocks\AbstractBlock::getBlockClassName($delta);
  if (class_exists($klass)) {
    /** @var Drupal\ptk_base\blocks\AbstractBlock $block */
    $block = new $klass();
    $block->save($edit);
  }
  else {
    drupal_set_message(t('Class !class does not exist.', ['!class' => $klass]), 'error');
  }
}

/**
 * Implements hook_schema_alter()
 */
function ptk_base_schema_alter(&$schema) {
  $column = 'title_field_value';
  $new_spec = array(
    'type' => 'varchar', 'length' => 2048, 'not null' => TRUE, 'default' => '',
  );
  $table = 'field_data_title_field';
  if (isset($schema[$table])) {
    $schema[$table]['fields'][$column] = $new_spec;
  }
  $table = 'field_revision_title_field';
  if (isset($schema[$table])) {
    $schema[$table]['fields'][$column] = $new_spec;
  }

  $column = 'name_field_value';
  $table = 'field_data_name_field';
  if (isset($schema[$table])) {
    $schema[$table]['fields'][$column] = $new_spec;
  }
  $table = 'field_revision_name_field';
  if (isset($schema[$table])) {
    $schema[$table]['fields'][$column] = $new_spec;
  }

  $table = 'node';
  $column = 'title';
  if (isset($schema[$table])) {
    $schema[$table]['fields'][$column] = $new_spec;
  }
  $table = 'node_revision';
  if (isset($schema[$table])) {
    $schema[$table]['fields'][$column] = $new_spec;
  }

  $table = 'taxonomy_term_data';
  if (isset($schema[$table])) {
    $schema[$table]['fields']['name']['length'] = 2048;
  }
}

/**
 * Implements hook_field_formatter_info().
 */
function ptk_base_field_formatter_info() {
  return array(
    'event_date_formatter' => array(
      'label' => t('Flexible event date'),
      'field types' => array('date', 'datestamp', 'datetime'),
      'settings' => array(
        /* No settings for now */
      ),
    ),
    'domain_link' => array(
      'label' => t('Domain text link'),
      'field types' => array('text'),
      'multiple values' => FIELD_BEHAVIOR_DEFAULT,
    ),
    'domain_image_link' => array(
      'label' => t('Domain image link'),
      'field types' => array('image'),
      'settings' => array('image_style' => '', 'image_link' => ''),
    ),
  );
}

function ptk_base_language_switch_links_alter(array &$links, $type, $path) {
  $node = menu_get_object();
  if ($node) {
    // Unset lang-switcher links for non-existent translations
    foreach ($links as $langcode => &$link) {
      if (!isset($node->translations->data[$langcode])) {
        unset($links[$langcode]);
      }
      $link['attributes']['hreflang'] = $langcode;
    }
  }
}

function ptk_base_get_domain_url($domain_id) {
  static $domains = [];
  if (!$domains) {
    $all = db_query("SELECT domain_id, subdomain, scheme, valid FROM {domain} where valid=1")->fetchAll();
    foreach($all as $domain) {
      $domains[$domain->domain_id] = $domain->scheme . '://' . $domain->subdomain;
    }
  }
  return $domains[$domain_id];
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function ptk_base_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $element = [];

  if ($display['type'] == 'domain_image_link') {
    $display = $instance['display'][$view_mode];
    $settings = $display['settings'];

    $image_styles = image_style_options(FALSE, PASS_THROUGH);
    $element['image_style'] = array(
      '#title' => t('Image style'),
      '#type' => 'select',
      '#default_value' => $settings['image_style'],
      '#empty_option' => t('None (original image)'),
      '#options' => $image_styles,
    );

    $link_types = array(
      'content' => t('Content'),
      'file' => t('File'),
    );
    $element['image_link'] = array(
      '#title' => t('Link image to'),
      '#type' => 'select',
      '#default_value' => $settings['image_link'],
      '#empty_option' => t('Nothing'),
      '#options' => $link_types,
    );
  }

  if ($display['type'] == 'domain_link') {
    $settings = $instance['display'][$view_mode]['settings'];
    $element = array();

    $wrap_tags = array(
      '_none' => t('- None -'),
      'div' => t('DIV'),
      'h1' => t('H1'),
      'h2' => t('H2'),
      'h3' => t('H3'),
      'h4' => t('H4'),
      'h5' => t('H5'),
      'h6' => t('H6'),
      'span' => t('SPAN'),
    );
    $element['title_style'] = array(
      '#title' => t('Wrap title in tag'),
      '#type' => 'select',
      '#default_value' => !empty($settings['title_style']) ? $settings['title_style'] : '_none',
      '#options' => $wrap_tags,
    );

    $link_types = array(
      'content' => t('Content'),
    );
    $element['title_link'] = array(
      '#title' => t('Link title to'),
      '#type' => 'select',
      '#default_value' => $settings['title_link'],
      '#empty_option' => t('Nothing'),
      '#options' => $link_types,
    );

    $element['title_class'] = array(
      '#title' => t('Tag classes'),
      '#type' => 'textfield',
      '#description' => t('A CSS class to use in the wrapper tag for the title.'),
      '#default_value' => $settings['title_class'],
      '#element_validate' => array('_title_validate_class'),
    );

  }
  return $element;
}

/**
 * Implements hook_field_formatter_view().
 *
 * @inheritdoc
 */
function ptk_base_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array(); // Initialize the var
  if ($display['type'] == 'event_date_formatter') {
    $settings = $display['settings']; // get the settings
    foreach ($items as $delta => $item) {
      $f = !empty($item['value']) ? strtotime($item['value']) : NULL;
      $t = !empty($item['value2']) ? strtotime($item['value2']) : NULL;
      $value = PTK::dateIntervalString($f, $t);
      $element[$delta] = array('#type' => 'item', '#markup' => $value);
    }
  }

  if ($display['type'] == 'domain_image_link') {
    // Check if the formatter involves a link.
    if ($display['settings']['image_link'] == 'content') {
      $uri = entity_uri($entity_type, $entity);
    }
    elseif ($display['settings']['image_link'] == 'file') {
      $link_file = TRUE;
    }
    $base_url = PTKDomain::baseDomain($entity->domains);
    $options['external'] = TRUE;
    foreach ($items as $delta => $item) {
      if (isset($link_file)) {
        $uri = array(
          'path' => file_create_url($item['uri']),
          'options' => array(),
        );
      }
      $uri['path'] = $base_url . '/' . $uri['path'];
      $element[$delta] = array(
        '#theme' => 'image_formatter',
        '#item' => $item,
        '#image_style' => $display['settings']['image_style'],
        '#path' => isset($uri) ? $uri : '',
      );
    }
  }

  if ($display['type'] == 'domain_link') {
    $settings = $display['settings'];
    $output = '';
    if (isset($items[0]['safe_value'])) {
      $output = $items[0]['safe_value'];
    }
    elseif (isset($items[0]['value'])) {
      $output = _text_sanitize($instance, $langcode, $items[0], 'value');
    }
    $element = array();

    if (!empty($output)) {
      if ($settings['title_link'] == 'content') {
        $uri = entity_uri($entity_type, $entity);
        $options = array('html' => TRUE);
        if (!empty($uri['options'])) {
          $options = array_merge($options, $uri['options']);
        }
        $base_url = PTKDomain::baseDomain($entity->domains);
        $options['external'] = TRUE;
        $output = l($output, $base_url . '/' . $uri['path'], $options);
      }

      $wrap_tag = empty($settings['title_style']) ? '_none' : $settings['title_style'];

      if ($wrap_tag != '_none') {
        $variables = array(
          'element' => array(
            '#tag' => $wrap_tag,
            '#value' => $output,
          ),
        );

        if (!empty($settings['title_class'])) {
          $variables['element']['#attributes'] = array('class' => $settings['title_class']);
        }

        $output = theme('html_tag', $variables);
      }

      $element = array(
        array(
          '#markup' => $output,
        ),
      );
    }
    return $element;
  }

  return $element;
}

/**
 * Implements hook_iucn_redlist_log().
 */
function ptk_base_iucn_redlist_log($message, $variables, $severity) {
  watchdog('iucn_redlist', $message, $variables, $severity);
}


/**
 * Implements hook_entity_info_alter().
 */
function ptk_base_entity_info_alter(&$entity_info) {
  $entity_info['entityqueue_subqueue']['access callback'] = array('PTK', 'entityQueueAccess');
  $entity_info['taxonomy_term']['view modes'] += array(
    'chm_country' => array(
      'label' => t('CHM Country'),
      'custom settings' => FALSE,
    ),
  );
}

/**
 * Implements hook_custom_theme().
 *
 * Render the book items with administrative theme (webmaster's manual)
 */
function ptk_base_custom_theme() {
  if ($object = menu_get_object()) {
    if ($object->type == 'book') {
      drupal_add_css(drupal_get_path('module', 'ptk_base') . '/css/book.css', array('weight' => -100));
      return 'seven';
    }
  }
}

function ptk_base_file_exists($path, $file) {
  if (file_exists(drupal_realpath(file_default_scheme() . '://') . $path . $file)) {
    return true;
  }
  return false;
}

function  theme_ptk_base_footer_logo($element) {
  global $language;
  $path = "/images/logos/chm/";
  $file = "logo-chm-{$language->language}.png";
  if (!ptk_base_file_exists($path, $file)) {
    $file = "logo-chm-en.png";
  }
  return '<img src="/files' . $path . $file . '" alt="' . $element['title'] . '" />';
}

function  theme_ptk_base_footer_support() {
  global $language;
  $path = "/images/logos/jbf/";
  $file = "logo-jbf-{$language->language}.png";
  if (!ptk_base_file_exists($path, $file)) {
    $file = "logo-jbf-en.png";
  }
  return '<img src="/files' . $path . $file . '" alt="' . t('Japan Biodiversity Fund') . '" />';
}

/**
 * Implements hook_theme().
 */
function ptk_base_theme($existing, $type, $theme, $path) {
  return array(
    'ptk_base_chm_content_statistics_block_config_form' => array(
      'render element' => 'element',
    ),
    'ptk_base_footer_logo' => array(
      'title' => NULL,
    ),
    'ptk_base_footer_support' => array(
    ),
  );
}

function theme_ptk_base_chm_content_statistics_block_config_form($variables) {
  $element = $variables['element'];
  $form = $element['chm_content_statistics'];
  drupal_add_tabledrag('config_table', 'order', 'sibling', 'item-row-weight');
  $header = array(
    'name' => t('Content type'),
    'hide' => t('Hide'),
    'singular' => t('Label (singular)'),
    'plural' => t('Label (plural)'),
    'url' => t('URL (route)'),
    'icon' => t('Icon markup'),
    'weight' => t('Weight'),
  );
  $rows = array();
  foreach (element_children($form) as $key) {
    $row = array('data' => array());
    foreach ($header as $fieldname => $title) {
      $row['data'][] = drupal_render($form[$key][$fieldname]);
      $row['class'] = array('draggable');
    }
    $rows[] = $row;
  }
  $prefix = '<p>' . t('Configure the display of content types statistics. Use the mouse to drag and drop rows to determine the display order in the front-end.') . '</p>';
  return $prefix
    . drupal_render($element['title'])
    . theme('table', array(
      'header' => $header,
      'rows' => $rows,
      'attributes' => array('id' => 'config_table'),
    ));
}


/**
 * Variables settings form
 */
/*
function ptk_base_admin_variables() {
  $domain = domain_get_domain();
  $realm_key = _domain_variable_realm_key($domain);
  module_load_include('form.inc', 'variable_realm');
  $build = drupal_get_form('variable_realm_edit_variables_form', 'domain', $realm_key);
  return $build;
}
*/

function ptk_base_site_information_settings_popup_update_submit($form, &$form_state) {
  $list = domain_variable_locale_language_list(NULL, NULL);
  foreach($list as $lang => $title) {
    $popup_settings = variable_get('eu_cookie_compliance_' . $lang, array());
    if ($popup_settings) {
      $popup_settings['popup_enabled'] = $form_state['input']['popup_enabled'];
      variable_set('eu_cookie_compliance_' . $lang, $popup_settings);
    }
  }
}
/**
 * Site name and Slogan settings form
 */
function ptk_base_site_information_settings() {
  module_load_include('inc', 'domain_variable_locale', 'domain_variable_locale.variable');

  $form = [];

  $form['regional_settings'] = array(
    '#type' => 'fieldset',
    '#title' => t('Regional settings'),
  );

  $form['regional_settings']['language_list'] = array(
    '#title' => t('List of active languages'),
    '#type' => 'checkboxes',
    '#default_value' => domain_variable_locale_language_list_defaults(NULL, NULL),
    '#options' => domain_variable_locale_language_list(NULL, NULL),
  );

  $form['regional_settings']['language_default'] = array(
    '#title' => t('Site default language'),
    '#type' => 'select',
    '#options' => locale_language_list('name', TRUE),
    '#default_value' => language_default('language'),
    '#element_validate' => ['locale_variable_language_element_validate']
  );

  // Date settings:
  $zones = system_time_zones();

  $form['regional_settings']['date_default_timezone'] = array(
    '#type' => 'select',
    '#title' => t('Default time zone'),
    '#default_value' => variable_get('date_default_timezone', date_default_timezone_get()),
    '#options' => $zones,
    '#description' => t('By default, dates in this site will be displayed in the chosen time zone.'),
    '#attributes' => array('class' => array('timezone-detect')),
  );

  $form['site_information'] = array(
    '#type' => 'fieldset',
    '#title' => t('Site details'),
  );
  $form['site_information']['site_name'] = array(
    '#type' => 'textfield',
    '#title' => t('Site name'),
    '#default_value' => variable_get('site_name', 'Drupal'),
    '#required' => TRUE
  );
  $form['site_information']['site_slogan'] = array(
    '#type' => 'textfield',
    '#title' => t('Slogan'),
    '#default_value' => variable_get('site_slogan', ''),
    '#description' => t("How this is used depends on your site's theme."),
  );

  $form['site_information']['site_mail'] = array(
    '#type' => 'textfield',
    '#title' => t('E-mail address'),
    '#default_value' => variable_get('site_mail', ini_get('sendmail_from')),
    '#description' => t("The <em>From</em> address in automated e-mails sent during registration and new password requests, and other notifications. (Use an address ending in your site's domain to help prevent this e-mail being flagged as spam.)"),
    '#required' => TRUE,
  );

  $form['site_information']['popup_enabled'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable popup'),
    '#default_value' => variable_get('popup_enabled'),
    '#description' => t('Show the EU cookie compliance popup on this website.'),
  );

  $form['#submit'][] = 'ptk_base_site_information_settings_popup_update_submit';
  return system_settings_form($form);
}

/**
 * Implements hook_variable_settings_form_alter().
 */
function ptk_base_variable_settings_form_alter(&$form, &$form_state, $form_id) {
  global $_domain, $user;
  $user_domains = domain_get_user_domains($user);

  $role = user_role_load_by_name('administrator');
  // no check for admin and dev
  if (user_has_role($role->rid) || $user->uid == 1) {
    return;
  }

  // current domain not in user domains
  if (!isset($user_domains[$_domain['domain_id']])) {
    drupal_access_denied();
    drupal_exit();
  }

  // restrict access to current domain only
  if (isset($_REQUEST['variable_realm_key_domain'])) {
    $uri = request_path();
    $params = drupal_get_query_parameters($_GET, array('q', 'page'));
    if ( $_domain['machine_name'] != $_REQUEST['variable_realm_key_domain'] ) {
      unset($params['variable_realm_key_domain']);
      if ($params) {
        drupal_goto($uri, array('query' => array($params)) );
      }
      else {
        drupal_goto($uri);
      }
    }
  }
  // hide attached domains block
  unset($form['variable_realm_selector_domain']);
}

function ptk_base_variable_info_alter(&$variables, $options) {
  $list = array(
    'popup_enabled',
  );
  foreach ($list as $name) {
    if (isset($variables[$name])) {
      $variables[$name]['multidomain'] = TRUE;
    }
  }
}

/**
 * Implements hook_init()
 *
 * Let realms be overriden by query string parameters, but only for:
 * - Admin paths (not variable realm admin pages)
 * - add realm for users with 'configure chm website settings' permissions
 */
function ptk_base_init() {
  if (arg(0) == 'admin' && (arg(3) == 'chm_website_settings') && ($params = variable_realm_params()) && !user_access('administer site configuration') && user_access('configure chm website settings') ) {
    foreach ($params as $realm_name => $realm_key) {
      variable_realm_switch($realm_name, $realm_key, FALSE);
    }
    variable_realm_rebuild();
  }
  
  $main_menu = variable_get('menu_main_links_source', 'main-menu');
  $active_menus = menu_get_active_menu_names();
  $active_menu_names = [];
  foreach($active_menus as $active_menu) {
    if (
      (strpos($active_menu, 'menu-') !== 0) ||
      (strpos($active_menu, 'menu-footer') === 0) ||
      ($active_menu == $main_menu)
    ) {
      $active_menu_names[] = $active_menu;
    }
  }
  menu_set_active_menu_names($active_menu_names); // exclude other domain main menus
}

/**
 * Implements hook_user_is_administrator().
 */
function ptk_base_user_is_administrator_alter(&$is_administrator) {
  global $user;
  $is_administrator = in_array(ROLE_ADMINISTRATOR, $user->roles);
}

/**
 * Add a SPAN tag around the value to make it targetable from CSS.
 *
 * @param array $build
 * @param array $settings
 */
function ptk_base_facet_items_alter(&$build, &$settings) {
  foreach ($build as $key => $item) {
    //dpm($build[$key]);
    $build[$key]["#html"] = TRUE;
    $build[$key]["#markup"] = '<span>' . $item["#markup"] . '</span>';
  }
}

function ptk_base_get_information_block_pages() {
  $query = db_select('node', 'n')
    ->fields('n', array('nid', 'title'))
    ->condition('title', 'Information')
    ->condition('type', 'page');
  $result = $query->execute();
  $rs = [];
  foreach ($result as $item) {
    $rs[] = 'node/' . $item->nid;
  }
  return implode(PHP_EOL, $rs);
}

function ptk_base_update_information_menus() {
  $custom_menus = menu_load_all();
  foreach($custom_menus as $menu_name => $menu) {
    if (strpos($menu_name, 'menu-main-menu-') !== 0) {
      continue;
    }
    ptk_base_add_update_information_menu_items($menu_name);
  }
}

function ptk_base_add_update_information_menu_items($menu_name) {
  $info_settings = ptk_base_get_information_settings();
  $data = menu_load_links($menu_name);
  foreach($data as $menu_item) {
    if ($menu_item['link_title'] == 'Information') {
      $information_mlid = $menu_item['mlid'];
      break;
    }
  }
  if (!empty($information_mlid)) {
    foreach($data as $menu_item) {
      if ($menu_item['plid'] == $information_mlid) {
        $link_path = $menu_item['link_path'];
        if (!$menu_item['options']['attributes']['class']) { // Require to update
          $mlid = $menu_item['mlid'];
          $item = menu_link_load($mlid);
          $item['options']['attributes']['class'] = $info_settings[$link_path]['class'];
          if (@$info_settings[$link_path]['accesskey']) {
            $item['options']['attributes']['accesskey'] = $info_settings[$link_path]['accesskey'];
          }
          menu_link_save($item);
        }
        if (@$info_settings[$link_path]) {
          unset($info_settings[$link_path]);
        }
      }
    }
  }
}

function ptk_base_get_information_settings() {
  $info_settings = [
    'news' => ['class' => ["fa", "fa-newspaper-o", "fa-4x"], 'accesskey' => 'n'],
    'events' => ['class' => ["fa", "fa-calendar", "fa-4x"], 'accesskey' => 'e'],
    'national-targets' => ['class' => ["fa", "fa-dot-circle-o", "fa-4x"], 'accesskey' => ''],
    'facts' => ['class' => ["fa", "fa-info-circle", "fa-4x"], 'accesskey' => ''],
    'faq' => ['class' => ["fa", "fa-question-circle-o", "fa-4x"], 'accesskey' => ''],
    'ecosystems' => ['class' => ["fa", "fa-recycle", "fa-4x"], 'accesskey' => 'c'],
    'protected-areas' => ['class' => ["fa", "fa-globe", "fa-4x"], 'accesskey' => ''],
    'projects' => ['class' => ["fa", "fa-sitemap", "fa-4x"], 'accesskey' => 'p'],
    'species' => ['class' => ["fa", "fa-bug", "fa-4x"], 'accesskey' => 's'],
    'organizations' => ['class' => ["fa", "fa-building-o", "fa-4x"], 'accesskey' => ''],
    'network-directory' => ['class' => ["fa", "fa-users", "fa-4x"], 'accesskey' => ''],
    'library' => ['class' => ["fa", "fa-folder-open-o", "fa-4x"], 'accesskey' => ''],
    'videos' => ['class' => ["fa", "fa-video-camera", "fa-4x"], 'accesskey' => ''],
    'photo-galleries' => ['class' => ["fa", "fa-picture-o", "fa-4x"], 'accesskey' => 'i'],
    'links' => ['class' => ["fa", "fa-link", "fa-4x"], 'accesskey' => ''],
  ];
  return $info_settings;
}
