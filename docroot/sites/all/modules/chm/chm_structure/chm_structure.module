<?php
/**
 * @file
 * Code for the CHM Structure feature.
 */

include_once 'chm_structure.features.inc';

/**
 * Implements hook_block_info().
 */
function chm_structure_block_info() {
  $blocks['species_arkive'] = array(
    'info' => t('Species Arkive'),
    'cache' => DRUPAL_CACHE_PER_PAGE,
  );
  return $blocks;
}

/**
 * Implements hook_menu_alter().
 */
function chm_structure_menu_alter(&$items) {
  // Change permissions for some core/contrib administration menus.
  if (isset($items['admin/config/regional/translate/import'])) {
    $items['admin/config/regional/translate/import']['access arguments'] = array('bypass node access');
  }
  if (isset($items['admin/config/regional/translate/i18n_string'])) {
    $items['admin/config/regional/translate/i18n_string']['access arguments'] = array('bypass node access');
  }
  if (isset($items['admin/config/regional/translate/export'])) {
    $items['admin/config/regional/translate/export']['access arguments'] = array('bypass node access');
  }
}

function chm_structure_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 'species_arkive':
      // Add species arkive iframe when no field_images available.
      $arkive_key = PTKDomain::variable_get('ptk_arkive_key', domain_get_domain());
      $node = menu_get_object();
      if (!empty($arkive_key) && !empty($node->nid) && $node->type == 'species' && empty($node->field_images)) {
        $block['subject'] = t('Species Arkive');
        drupal_add_js(
          array(
            'chm_structure' => array(
              'species_arkive_key' => $arkive_key,
              'species_arkive_name' => strtolower($node->title),
            ),
          ), 'setting');
        drupal_add_js(drupal_get_path('module', 'chm_structure') .'/js/arkive.js', 'file');
        $block['content'] = array(
          '#type' => 'markup',
          '#markup' => '<div id="arkiveIframe"></div>',
        );
      }

      break;
  }
  return $block;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function chm_structure_form_locale_translation_filter_form_alter(&$form, &$form_state, $form_id) {
  global $user;
  // Remove from select options inactive language for current domain.
  if ($user->uid != 1) {
    module_load_include('inc', 'domain_variable_locale', 'domain_variable_locale.variable');
    $available_languages = variable_get('language_list');
    $available_languages = array_filter($available_languages);
    $available_options = array_keys($available_languages) + array('all');
    foreach ($form['filters']['status']['language']['#options'] as $key => $value) {
      if (!in_array($key, $available_options)) {
        unset($form['filters']['status']['language']['#options'][$key]);
      }
    }
  }
}
