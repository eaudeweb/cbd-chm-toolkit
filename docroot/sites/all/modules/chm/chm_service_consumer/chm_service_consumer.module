<?php

define('GEF_CSV_VAR', 'ptk_gef_csv_path');
define('GEF_CSV_UPLOAD_DIR', 'public://gef-projects/');

/**
 * Implements Elysia hook_cronapi().
 */
function chm_service_consumer_cronapi() {
  return array(
    'chm_service_consumer_cron' => array(
      'description' => 'Import NFP from InforMEA',
      'rule' => '0 0 * * *',
    ),
    'chm_service_consumer_protected_planet' => array(
      'description' => 'Import Protected Planet areas (every 3 days)',
      'rule' => '0 0 */3 * *',
    ),
    'chm_service_consumer_nbsap' => array(
      'description' => 'Import NBSAP documents from SCBD (every Sunday at 08:05)',
      'rule' => '5 8 * * 6',
    ),
  );
}


/**
 * Implements hook_menu().
 */
function chm_service_consumer_menu() {
  $items = [
    'admin/config/system/chm_global_settings/gef' => [
      'title' => 'GEF',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('chm_service_consumer_gef_settings_form'),
      'file' => 'chm_service_consumer.admin.inc',
      'access arguments' => ['configure chm settings'],
      'type' => MENU_LOCAL_TASK,
      'description' => 'Configure Global Environment Facility (GEF) data source',
    ],
  ];
  return $items;
}

/**
 * Implements hook_cron().
 */
function chm_service_consumer_cron() {
  module_load_include('inc', 'migrate_ui', 'migrate_ui.pages');
  $machine_name = 'nfp';
  // Update Focal Point Migration.
  $migration = Migration::getInstance($machine_name);
  $migration->prepareUpdate();
  watchdog('chm_service_consumer', 'Starting import @migration',
    array('@migration' => $machine_name), WATCHDOG_INFO);
  $result = $migration->processImport(array('update' => TRUE));
  watchdog('chm_service_consumer', 'Done @migration with result: @result',
    array('@migration' => $machine_name, '@result' => $result), WATCHDOG_INFO);
}

/**
 * Trigger protected_planet migration.
 */
function chm_service_consumer_protected_planet() {
  module_load_include('inc', 'migrate_ui', 'migrate_ui.pages');
  $machine_name = 'protected_areas';
  $migration = Migration::getInstance($machine_name);
  watchdog('chm_service_consumer', 'Starting import @migration', array('@migration' => $machine_name), WATCHDOG_INFO);
  $migration->prepareUpdate();
  $result = $migration->processImport(array('update' => TRUE));
  watchdog('chm_service_consumer', 'Done @migration with result: @result',
    array('@migration' => $machine_name, '@result' => $result), WATCHDOG_INFO);
}

/**
 * Trigger NBSAP migration.
 */
function chm_service_consumer_nbsap() {
  module_load_include('inc', 'migrate_ui', 'migrate_ui.pages');
  $machine_name = 'nbsap';
  // Update Focal Point Migration.
  $migration = Migration::getInstance($machine_name);

  $migration->prepareUpdate();
  watchdog('chm_service_consumer_nbsap', 'Starting import @migration',
    array('@migration' => $machine_name), WATCHDOG_INFO);

  $result = $migration->processImport(array('update' => TRUE));

  watchdog('chm_service_consumer_nbsap', 'Done @migration with result: @result',
    array('@migration' => $machine_name, '@result' => $result), WATCHDOG_INFO);
  return '';
}


/**
 * Implements hook_migrate_api().
 */
function chm_service_consumer_migrate_api() {
  return [
    'api' => 2,
    'groups' => [
      'cbd' => [ 'title' => t('CBD API migrations'), ],
      'protected-planet' => [ 'title' => t('Protected Planet'), ],
    ],
    'migrations' => [
      'nfp' => [
        'class_name' => 'CHMServerConsumerNFPMigration',
        'group_name' => 'cbd',
        'urlPattern' => 'https://api.cbd.int/informea.svc/Contacts',
      ],
      'protected_areas' => [
        'class_name' => 'CHMServerConsumerPAMigrate',
        'group_name' => 'protected-planet',
      ],
      'nbsap' => [
        'class_name' => 'CHMServiceDocumentNBSAPMigration',
        'group_name' => 'cbd',
        'urlPattern' => 'https://chm.cbd.int/api/v2013/index/select?q=realm_ss:chm+AND+schema_s:nationalReport+AND+reportType_s:B0EBAE91-9581-4BB2-9C02-52FCF9D82721',
      ],
    ],
  ];
}


/**
 * Base class for migrations.
 */
class CHMServerConsumerMigration extends Migration {


  public function __construct($arguments) {
    parent::__construct($arguments);
  }


  function log($message) {
    $this->currentMigration()->saveMessage($message);
    $this->currentMigration()->displayMessage($message);
  }

  static function getOrCreateTaxonomyTermByName($name, $machine_name) {
    $voc = taxonomy_vocabulary_machine_name_load($machine_name);
    /** @var SelectQuery $query */
    $query = db_select('taxonomy_term_data', 'a')->fields('a', array('tid'))->condition('vid', $voc->vid)->condition('name', $name);
    if ($tid = $query->execute()->fetchField()) {
      return $tid;
    }
    else {
      // Create the term
      $term = new stdClass();
      $term->language = 'en';
      $term->vid = $voc->vid;
      $term->name = $name;
      $term->name_field['en'][0]['value'] = $name;
      taxonomy_term_save($term);
      if (!empty($term->tid)) {
        return $term->tid;
      }
      return NULL;
    }
  }
}


/**
 * Base class for migration source classes.
 */
abstract class CHMServerConsumerMigrateSource extends MigrateSource {

  protected $urlPattern = NULL;
  protected $count = NULL;
  protected $data = array();
  protected $currentPage = 0;
  protected $currentCount = 0;
  protected $pageSize = 100;


  public function __construct($urlPattern) {
    parent::__construct(array());
    $this->urlPattern = $urlPattern;
  }


  public function __toString() {
    return sprintf('Extract data from the API');
  }


  public function count($refresh = FALSE) {
    if (empty($this->count) || $refresh) {
      $url = $this->urlPattern . '/$count';
      if ($response = self::http_request($url)) {
        $this->count = $response;
      }
    }
    return $this->count;
  }


  /**
   * Fetch the next row of data, returning it as an object.
   *
   * @return object
   *   FALSE data as stdClass, FALSE when there is no more data available.
   */
  public function getNextRow() {
    $next_call_count = $this->currentPage * $this->pageSize;
    if ($this->currentCount == $this->count()) {
      return NULL;
    }
    if ($this->currentCount == $next_call_count && $next_call_count < $this->count()) {
      $start = $this->currentPage * $this->pageSize;
      if ($str = self::http_request($this->urlPattern . '?$top=' . $this->pageSize . '&$skip=' . $start, array('Accept: application/json'))) {
        $result = json_decode($str, FALSE);
        if (!empty($result->d->results)) {
          $this->data = $result->d->results;
          $this->currentPage++;
        }
      }
    }
    $item = NULL;
    if (count($this->data)) {
      $item = current($this->data);
      next($this->data);
      $this->currentCount++;
    }
    return $item;
  }


  /**
   * Do whatever needs to be done to start a fresh traversal of the source data.
   *
   * This is always called at the start of an import, so tasks such as opening
   * file handles, running queries, and so on should be performed here.
   */
  public function performRewind() {
    $this->data = array();
    $this->currentPage = 0;
    $this->currentCount = 0;
  }

  static function http_request($url, $headers = array()) {
    migrate_instrument_start(__CLASS__ . ' http_request');
    self::log(__METHOD__ . ": $url", MigrationBase::MESSAGE_INFORMATIONAL);
    $ch = curl_init();
    curl_setopt($ch, CURLOPT_URL, $url);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
    curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 10);
    curl_setopt($ch, CURLOPT_TIMEOUT, 400);
    curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);
    curl_setopt($ch, CURLOPT_NOBODY, 0);
    $ret = curl_exec($ch);
    $info = curl_getinfo($ch);
    if ($info['http_code'] != 200) {
      $code = $info['http_code'];
      self::log(__METHOD__ . ": Failure ({$code}) for URL: $url", MigrationBase::MESSAGE_ERROR);
      $ret = NULL;
    }
    curl_close($ch);
    migrate_instrument_stop(__CLASS__ . ' http_request');
    return $ret;
  }

  /**
   * Log system for the ws_consumer_odata migrations.
   *
   * @param string $message
   *   Log message
   * @param int $severity
   *    See MigrationBase::MESSAGE_* constants
   */
  static function log($message, $severity = MigrationBase::MESSAGE_INFORMATIONAL) {
    if (function_exists('drush_log')) {
      $status = 'status';
      switch($severity) {
        case MigrationBase::MESSAGE_ERROR:
          $status = 'error';
          break;
        case MigrationBase::MESSAGE_WARNING:
          $status = 'warning';
          break;
        case MigrationBase::MESSAGE_NOTICE:
          $status = 'notice';
          break;
      }
      drush_log($message, $status);
    }
  }
}
